I"1<p>pandas DataFrame的增删查改总结系列文章：</p>
<ul>
  <li><a href="/language/2018/07/08/pandas01.html">pandas DaFrame的创建方法</a></li>
  <li><a href="/language/2018/10/08/pandas03.html">pandas DataFrame的查询方法</a></li>
  <li><a href="/language/2018/09/25/pandas02.html">pandas DataFrame行或列的删除方法</a></li>
  <li><a href="/language/2018/10/09/pandas04.html">pandas DataFrame的修改方法</a></li>
</ul>

<p>在操作DataFrame时，肯定会经常用到loc，iloc，at等函数，各个函数看起来差不多，但是还是有很多区别的，我们一起来看下吧。</p>

<p>首先，还是列出一个我们用的DataFrame，注意index一列，如下：</p>

<p><img src="/postimg/python/loc_etc/dataframe_instance.png" alt="" /></p>

<p>接下来，介绍下各个函数的用法：</p>
<h3 id="1loc函数">1、loc函数</h3>
<p>愿意看官方文档的，请戳<a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.loc.html">这里</a>，这里一般最权威。<br />
loc函数是基于“标签”选择数据的，但是也可以接受一个boolean的array，对于每个用法，我们一一举例：</p>
<h4 id="11-单个label">1.1 单个label</h4>
<p>接受一个“标签”（label）参数，返回一个Series，例如下面这个例子收一个标签，返回通过这个标签定位的行的值，注意这里是通过标签定位，而不是通过中括号中的数字定位第几行，之后我们通过对比iloc函数时还会细说。</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_dict_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c1">#return the row with name 'Bob'
</span><span class="n">test_dict_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="c1">#return the row with name 'Time' important!!!
# type(test_dict_df.loc[1]) #pandas.core.series.Series
</span></code></pre></div></div>

<h4 id="12-一个label的array">1.2 一个label的array</h4>
<p>如果键入一个标签的array，那么就返回一个对应的DataFrame：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_dict_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">]]</span>
</code></pre></div></div>
<p>结果如下：<br />
<img src="/postimg/python/loc_etc/dataframe_instance1.png" alt="" /></p>

<h4 id="13-加入一个切片array">1.3 加入一个切片array</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_dict_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[[</span><span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">]]</span>
</code></pre></div></div>
<p>结果如下：<br />
<img src="/postimg/python/loc_etc/dataframe_instance2.png" alt="" /></p>

<h4 id="14-行标签列标签">1.4 行标签，列标签</h4>
<p>通过在中括号中加入行标签和列标签来定位一个cell，相当于坐标的定位：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_dict_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="s">'english'</span><span class="p">]</span>  <span class="c1">#result：94
</span></code></pre></div></div>
<h4 id="15-行标签或者列标签是切片array">1.5 行标签或者列标签是切片array</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_dict_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span><span class="s">'english'</span><span class="p">]</span>
<span class="c1"># test_dict_df.loc[1:4,'english':'math']
</span></code></pre></div></div>
<h4 id="16-还可以接受条件进行选择">1.6 还可以接受条件，进行选择</h4>
<p>例如我们选择英语成绩超过90的所有行：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_dict_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">test_dict_df</span><span class="p">[</span><span class="s">'english'</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">90</span><span class="p">]</span>
</code></pre></div></div>
<p><img src="/postimg/python/loc_etc/dataframe_instance3.png" alt="" /></p>

<p>当然，也可以再条件选择后，再加入列选择，列选择的时候可以单列，也可以是切片数组，通过上面的介绍这里就可以灵活处理：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_dict_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">test_dict_df</span><span class="p">[</span><span class="s">'english'</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">90</span><span class="p">,</span><span class="s">'english'</span><span class="p">]</span> <span class="c1">#single label
</span><span class="n">test_dict_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">test_dict_df</span><span class="p">[</span><span class="s">'english'</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">90</span><span class="p">,</span><span class="s">'english'</span><span class="p">:</span><span class="s">'name'</span><span class="p">]</span> <span class="c1">#slice array
</span><span class="n">test_dict_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">test_dict_df</span><span class="p">[</span><span class="s">'english'</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">90</span><span class="p">,[</span><span class="s">'english'</span><span class="p">,</span><span class="s">'name'</span><span class="p">]]</span> <span class="c1">#label array
</span></code></pre></div></div>

<h4 id="17-接受一个boolean的array">1.7 接受一个boolean的array</h4>
<p>可以接受一个boolean的array，相当于按照这个表的真假按照位置的顺序选择值:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_dict_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[[</span><span class="bp">True</span><span class="p">,</span><span class="bp">False</span><span class="p">,</span><span class="bp">False</span><span class="p">,</span><span class="bp">True</span><span class="p">]]</span>
</code></pre></div></div>

<p>loc还有很多用法，这里先介绍到这里吧，当然如果你的DataFrame是复合的行或者复合列，写法也是不同的，具体就可以查阅官方文档了！</p>

<h3 id="2iloc函数">2、iloc函数</h3>
<p>官方文档戳<a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.iloc.html#pandas.DataFrame.iloc">这里</a>。 <br />
iloc函数与loc函数不同的是，<span style="color:red">它接受的是一个数字</span>，代表着要选择数据的位置：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_dict_df</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span>
</code></pre></div></div>
<p>这代表我们选择的是第6行，而不是index为6的那一行。当然，也可以接受一个boolean的array，相当于按照这个表的真假按照位置的顺序选择值：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_dict_df</span><span class="o">.</span><span class="n">iloc</span><span class="p">[[</span><span class="bp">True</span><span class="p">,</span><span class="bp">False</span><span class="p">,</span><span class="bp">False</span><span class="p">,</span><span class="bp">True</span><span class="p">]]</span>
</code></pre></div></div>
<p>这里iloc也可以接受切片array：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_dict_df.iloc[1:2]
</span><span class="n">test_dict_df</span><span class="o">.</span><span class="n">iloc</span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">]]</span>
</code></pre></div></div>

<h3 id="3ix函数0200版本后已经弃用">3、ix函数（0.20.0版本后已经弃用）</h3>
<p>ix就是一种混合索引，字符串的标签和证书的数据索引都可以作为合法输入，其实相当于loc和iloc的一个混合方法：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_dict_df</span><span class="o">.</span><span class="n">ix</span><span class="p">[</span><span class="s">'Alice'</span><span class="p">]</span>
<span class="n">test_dict_df</span><span class="o">.</span><span class="n">ix</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>
<p>上述两种方法都能得到值，这里我们就不追究这个函数具体是怎样的检索顺序或者工作原理了。因为官方给出的是从pandas0.20.0之后，ix函数已经被弃用。其实在使用的时候，ix函数虽然方便，但是的确有时候会显得比较混乱，所以我们之后也尽量少用这个函数吧，还是按照官方大佬的指导。</p>

<h3 id="4at函数">4、at函数</h3>
<p>at是用来选择单个值的，此时用法类似于loc：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_dict_df</span><span class="o">.</span><span class="n">at</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="s">'english'</span><span class="p">]</span>
<span class="n">test_dict_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="s">'english'</span><span class="p">]</span>
</code></pre></div></div>
<p>以上两种方法都能选择到，label为1，列为’english’的那个值，但是据说at速度要快，这点我没有考证过。</p>

<h3 id="5iat函数">5、iat函数</h3>
<p>iat函数相对于at函数，就相当于iloc相对于loc函数。iat也只能选择一个值。只不过是用索引位置来选择，注意：行列都是索引位置来选择，从0开始数。</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_dict_df.iat[1,'english'] #error!!!
</span><span class="n">test_dict_df</span><span class="o">.</span><span class="n">iat</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span> <span class="c1">#right!!!
</span></code></pre></div></div>

<h3 id="6概括一下">6、概括一下</h3>
<p>最后我们概括一下：<br />
1、 loc和iloc函数都是用来选择某行的，iloc与loc的不同是：iloc是按照行索引所在的位置来选取数据，参数只能是整数。而loc是按照索引名称来选取数据，参数类型依索引类型而定；<br />
2、 at和iat函数是只能选择某个位置的值，iat是按照行索引和列索引的位置来选取数据的。而at是按照行索引和列索引来选取数据；<br />
3、 loc和iloc函数的功能包含at和iat函数的功能。</p>

<p>相应的代码连接：<a href="https://github.com/dataSnail/blogCode/blob/master/python_curd/python_loc_iloc_at_etc.ipynb">github代码</a></p>

<p>先写到这里，如有新的再补充。</p>
:ET